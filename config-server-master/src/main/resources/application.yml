server:
  port: 8888

#会在所有actuator 提供的端点前一个指定前缀 对
#应在eureka检查端点上也需要做出相应配置
#management:
#  context-path: /admin
  security:
    enabled: false



#配置多个注册中心 逗号分隔
eureka:
  client:
      service-url:
            defaultZone: http://discovery:8761/eureka
  instance:
    hostname: configserver
#    non-secure-port: 80
#    lease-renewal-interval-in-seconds: 10
#    注册中心健康状况页 http://configserver:8888/health
    health-check-url-path: ${management.context-path}/health
#    注册中心状态页 http://configserver:8888/health
    status-page-url-path: ${management.context-path}/info
    prefer-ip-address: true


#config server repository
spring:
#  从本地读取配置（不推荐）
#  profiles:
#    active: native
  cloud:
    config:
      server:
#      远程配置文件路径
        git:
          uri: https://github.com/looper123/config-repository-master.git
          search-paths: config-child
          username: m17701848923@163.com
          password: lzp19920312
#          使用了git或者svn 后再本地的备份文件
#          windows下的绝对路径需要用///来分隔（by 官网）
          basedir: D:///idea workspace///spring-cloud-local-bak
#         本地配置文件路径(需要打开读取本地配置spring.profiles.active= native)
#        native:
#          search-locations: D:///idea workspace///spring-cloud-local-bak
#         配置库健康监测
        health:
          repositories:
              check:
                name: didispace
#                label:
                profiles: dev

#          git远程配置文件命名规则
#          • /{application}/{profile} [/{label}]
#          • {application}一{profile}. yml
#          • /{label}/{application}-{profile}.yml
#          • /{application}-{profile}.properties
#          • /{label}/{application}-{profile}.properties


#spring-sercurity
#security:
#  basic:
#    enabled: false
#  oauth2:
#    client:
#      access-token-uri: ${vcap.services.${PREFIX:}sso.credentials.tokenUri:}
#      user-authorization-uri: ${vcap.services.${PREFIX:}sso.credentials.authorizationUri:}
#      client-id: ${vcap.services.${PREFIX:}sso.credentials.clientId:}
#      client-secret: ${vcap.services.${PREFIX:}sso.credentials.clientSecret:}
#    resource:
#      token-info-uri: ${vcap.services.${OAUTH2_RESOURCE_SERVICEID:${oauth2.resource.serviceId:sso}}.credentials.tokenInfoUri:}
#      service-id: ${PREFIX:}resource

management.security.enabled: false




